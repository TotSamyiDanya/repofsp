@page "/registration"
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using FSPApi.Models;
@using Newtonsoft.Json;
@using System.Text;

<PageTitle>Регистрация</PageTitle>
<EditForm Model="Role" onchange="ChangeCheck">
    <span>Я:</span>
    <InputSelect @bind-Value=Role>
        <option value="Спортсмен" selected>Спортсмен</option>
        <option value="Тренер">Тренер</option>
        <option value="Представитель региональной федерации">Представитель региональной федерации</option>
        <option value="Администратор">Администратор</option>
        <option value="Партнер федерации">Партнер федерации</option>
    </InputSelect>
</EditForm>
@if (Role == "Спортсмен")
{
    <EditForm Model="athlete" OnSubmit="AuthAtlete">
        <InputText @bind-Value=athlete.Login placeholder="Введите логин"></InputText>
        <InputText @bind-Value=athlete.Password placeholder="Введите пароль"></InputText>
        <button type="submit">Зарегестрироваться</button>
        <a href="">У вас уже есть аккаунт? - Тогда авторизуйтесь!</a>
    </EditForm>
}
@if (Role == "Тренер")
{
    <EditForm Model="coach" OnSubmit="AuthCoach">
        <InputText @bind-Value=coach.Login placeholder="Введите логин"></InputText>
        <InputText @bind-Value=coach.Password placeholder="Введите пароль"></InputText>
        <button type="submit">Войти</button>
        <a href="">У вас уже есть аккаунт? - Тогда авторизуйтесь!</a>
    </EditForm>
}
@if (Role == "Представитель региональной федерации")
{
    <EditForm Model="representative" OnSubmit="AuthRepresentative">
        <InputText @bind-Value=representative.Login placeholder="Введите логин">3</InputText>
        <InputText @bind-Value=representative.Password placeholder="Введите пароль"></InputText>
        <button type="submit">Войти</button>
        <a href="">У вас уже есть аккаунт? - Тогда авторизуйтесь!</a>
    </EditForm>
}
@if (Role == "Администратор")
{
    <EditForm Model="admin" OnSubmit="AuthAdmin">
        <InputText @bind-Value=admin.Login placeholder="Введите логин">4</InputText>
        <InputText @bind-Value=admin.Password placeholder="Введите пароль"></InputText>
        <button type="submit">Войти</button>
        <a href="">У вас уже есть аккаунт? - Тогда авторизуйтесь!</a>
    </EditForm>
}
@if (Role == "Партнер федерации")
{
    <EditForm Model="partner" OnSubmit="AuthPartner">
        <InputText @bind-Value=partner.Login placeholder="Введите логин">5</InputText>
        <InputText @bind-Value=partner.Password placeholder="Введите пароль"></InputText>
        <button type="submit">Войти</button>
        <a href="">У вас уже есть аккаунт? - Тогда авторизуйтесь!</a>
    </EditForm>
}
@code {
    private string Role = "Спортсмен";
    Athlete athlete = new();
    Representative representative = new();
    Coach coach = new();
    Admin admin = new();
    Partner partner = new();
    private async Task AuthAtlete()
    {
        Uri url = new("https://localhost:7231/api/User/authathlete");
        HttpContent content = new StringContent(JsonConvert.SerializeObject(athlete), Encoding.UTF8, "application/json");
        HttpResponseMessage respose = await new HttpClient().PostAsync(url, content);
        if (respose.IsSuccessStatusCode)
        {
            await localStorage.SetItemAsync("user", respose.Content.ReadAsStringAsync().Result);
            await localStorage.SetItemAsync("role", Role);
            NavigationManager.NavigateTo("userpage");
        }
    }
    private async Task AuthCoach()
    {
        Uri url = new("https://localhost:7231/api/User/authcoach");
        HttpContent content = new StringContent(JsonConvert.SerializeObject(athlete), Encoding.UTF8, "application/json");
        HttpResponseMessage respose = await new HttpClient().PostAsync(url, content);
        if (respose.IsSuccessStatusCode)
        {
            await localStorage.SetItemAsync("user", respose.Content.ReadAsStringAsync().Result);
            await localStorage.SetItemAsync("role", Role);
            NavigationManager.NavigateTo("userpage");
        }
    }
    private async Task AuthRepresentative()
    {

    }
    private async Task AuthAdmin()
    {

    }
    private async Task AuthPartner()
    {

    }
    private void ChangeCheck()
    {
        StateHasChanged();
    }
    }
